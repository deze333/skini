# Comment
id = /home/absent
logDir = /home/absent
logFile = my.log

supporting =
    classA
    classB

    classC

# Comment
[server.http]
    # Server specification
    port = 8080
    # Server specification
    mode = debug
    keys =
        keyOne
        keyTwo
        keyThree
    colors =
        red
        green
        blue

[map.texts]
    hello = Hey there !
    bye = See ya :)
    random = s=f(x)
    last/mine = MUST BE PRESENT
    text += Problems can be solved in a programming language, or in the stan-
    dard libraries which accompany the language. I argue how certain of the
    requirements necessary to build a fault-tolerant system are solved in the
    language, and others are solved in the standard libraries. Together these
    form a basis for building fault-tolerant sodware systems.
    No theory is complete without proof that the ideas work in practice. To
    demonstrate that these ideas work in practice I present a number of case
    studies of large commercially successful products which use this technol-
    ogy. At the time of writing the largest of these projects is a major Ericsson
    product, having over a million lines of Erlang code. This product (the
    AXD301) is thought to be one of the most reliable products ever made by
    Ericsson.

[map.redirects]
    ^abc/def$ = efg
    ^bed/bye$ = lko
